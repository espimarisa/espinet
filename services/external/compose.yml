---
services:
    ###############################################################################################
    # Caddy: Web server and reverse proxy.                                                        #
    ###############################################################################################

    caddy:
        container_name: caddy
        image: ghcr.io/homeall/caddy-reverse-proxy-cloudflare:latest
        env_file: ./.env
        hostname: caddy
        restart: unless-stopped
        depends_on:
            socket-proxy:
                condition: service_healthy # Require socket-proxy to be healthy before starting.
                restart: true
        environment:
            CADDY_INGRESS_NETWORKS: "external" # Only handle traffic from the external network.
            CLOUDFLARE_API_TOKEN: "${CLOUDFLARE_API_TOKEN}" # Scoped Cloudflare account token with DNS Zone edit permissions.
            DOCKER_HOST: "tcp://socket-proxy:2375" # Connect to the Caddy socket proxy.
            TZ: "${TZ}" # Local timezone to use.
        labels:
            caddy.acme_dns: "cloudflare ${CLOUDFLARE_API_TOKEN}" # Use Cloudflare for TLS DNS challenges.
            caddy.email: "${ACME_EMAIL}" # Email to use for ACME challenges.
        networks:
            - external # External and reverse proxy network.
            - socket-proxy # Internal-only socket-proxy network.
        ports:
            - 80:80/tcp # HTTP traffic.
            - 443:443/tcp # HTTPS traffic.
            - 443:443/udp # HTTPS3 traffic.
        security_opt:
            - no-new-privileges:true
        volumes:
            - caddy:/data # Caddy configuration and data volume.

    ###############################################################################################
    # Cloudflare-DDNS: Automatically update A/AAAA records on Cloudflare upon IP changes.         #
    ###############################################################################################

    cloudflare-ddns:
        container_name: cloudflare-ddns
        image: favonia/cloudflare-ddns:latest
        env_file: ./.env
        network_mode: host # Required for IPV6.
        read_only: true
        restart: unless-stopped
        user: ${PUID}:${PGID}
        cap_drop:
            - ALL
        environment:
            CLOUDFLARE_API_TOKEN: "${CLOUDFLARE_API_TOKEN}" # Scoped Cloudflare account token with DNS Zone edit permissions.
            DOMAINS: "${DOMAINS}" # List of domains to update DNS records for.
            EMOJI: "false" # Disable emoji inside of log files.
            PROXIED: "false" # Disable proxying service traffic through Cloudflare.
            TZ: "${TZ}" # Local timezone to use.
            UPDATE_CRON: "@every 1h" # Checks for an updated IP address every hour.
        security_opt:
            - no-new-privileges:true

    ###############################################################################################
    # Socket Proxy: Docker socket proxy for higher control and security.                          #
    ###############################################################################################

    socket-proxy:
        container_name: socket-proxy
        image: lscr.io/linuxserver/socket-proxy:latest
        env_file: ./.env
        hostname: socket-proxy
        read_only: true
        tmpfs: /run # Required for read_only image.
        environment:
            ALLOW_RESTARTS: "1" # Allow restarting containers.
            ALLOW_START: "1" # Allow starting containers.
            ALLOW_STOP: "1" # Allow stopping containers.
            AUTH: "0" # Disable auth endpoint.
            BUILD: "0" # Disable build endpoint.
            COMMIT: "0" # Disable commit endpoint.
            CONFIGS: "0" # Disable configs endpoint.
            CONTAINERS: "1" # Allow containers endpoint.
            DISABLE_IPV6: "1" # Disable IPV6 binding.
            DISTRIBUTION: "0" # Disable distribution endpoint.
            EVENTS: "1" # Allow event logging.
            EXEC: "0" # Disable exec endpoint.
            IMAGES: "0" # Disable images endpoint.
            INFO: "0" # Disable info endpoint.
            LOG_LEVEL: info # Use info logging level.
            NETWORKS: "1" # Allow networks endpoint.
            NODES: "1" # Enable nodes endpoint.
            PING: "1" # Enable ping endpoint.
            PLUGINS: "0" # Disable plugins endpoint.
            POST: "0" # Disable POST requests.
            SECRETS: "0" # Disable secrets endpoint.
            SERVICES: "1" # Enable services endpoint.
            SESSION: "0" # Disable session endpoint.
            SWARM: "1" # Enable swarm endpoint.
            SYSTEM: "0" # Disable system endpoint.
            TASKS: "0" # Disable tasks endpoint.
            TZ: "${TZ}" # Local timezone to use.
            VERSION: "1" # Enable version endpoint.
            VOLUMES: "0" # Disable volume endpoint.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 15s
            test: "wget --spider http://127.0.0.1:2375/_ping || exit 1"
            timeout: 3s
        networks:
            - socket-proxy # Internal-only socket-proxy network.
        security_opt:
            - no-new-privileges:true
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro # Read-only Docker socket mount.

    ###############################################################################################
    # Jellyfin: Media server.                                                                     #
    ###############################################################################################

    jellyfin:
        container_name: jellyfin
        image: lscr.io/linuxserver/jellyfin:latest
        env_file: ./.env
        hostname: jellyfin
        restart: unless-stopped
        devices:
            - /dev/dri/renderD128:/dev/dri/renderD128 # Video device support; renderD128 is GPU0.
        environment:
            DOCKER_MODS: "linuxserver/mods:jellyfin-opencl-intel:latest" # Enables the latest OpenCL drivers.
            JELLYFIN_PublishedServerUrl: "https://${JELLYFIN_URL}" # Configures autodiscovery to use the external URL.
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 1m
            test: "curl -f http://127.0.0.1:8096/health || exit 1"
            timeout: 3s
        labels:
            caddy: "${JELLYFIN_URL}" # Tells Caddy to reverse proxy to the external Jellyfin URL.
            caddy.reverse_proxy: "jellyfin:8096" # Tells Caddy to reverse proxy internal traffic on port 8096.
            caddy.tls.ca: "https://acme.zerossl.com/v2/DV90" # Use ZeroSSL as the CA issuer.
            caddy.tls.dns: "cloudflare $CLOUDFLARE_API_TOKEN" # Use Cloudflare for DNS challenges.
            caddy.tls.protocols: "tls1.3" # Requires clients to support TLS 1.3.
        networks:
            - external # External Caddy network; reverse proxy.
        ports:
            - ${JELLYFIN_PORT:-8096}:8096/tcp # Jellyfin web interface.
        security_opt:
            - no-new-privileges:true # Prevents privilege escalation.
        volumes:
            - jellyfin:/config # Jellyfin configuration and database volume.
            - media-library:/library # Root path to the media library.

    ###############################################################################################
    # OpenCloud: Self-hosted cloud storage.                                                       #
    ###############################################################################################

    opencloud:
        container_name: opencloud
        image: opencloudeu/opencloud-rolling:latest
        entrypoint: /bin/sh
        env_file: ./.env
        hostname: opencloud
        restart: unless-stopped
        command:
            ["-c", "opencloud init --insecure true || true; opencloud server"]
        environment:
            FRONTEND_ARCHIVER_MAX_SIZE: "10000000000" # Max number of files that can be packed into an archive.
            IDM_ADMIN_PASSWORD: "${OPENCLOUD_ADMIN_PASSWORD}" # Configures the initial admin password.
            IDM_CREATE_DEMO_USERS: "false" # Do not create demo users.
            OC_INSECURE: "false" # Do not run in insecure mode.
            OC_LOG_COLOR: "true" # Log in color.
            OC_LOG_LEVEL: "info" # Log at the info level.
            OC_LOG_PRETTY: "true" # Use pretty logs.
            OC_URL: "https://${OPENCLOUD_URL}" # Configures the OpenCloud URL.
            PROXY_TLS: "false" # Do not use SSL between the reverse proxy and OpenCloud.
            SMTP_TRANSPORT_ENCRYPTION: "${SMTP_TRANSPORT_ENCRYPTION}" # External SMTP port to connect to.
            SMTP_HOST: "${SMTP_HOST}" # External SMTP host URL to connect to.
            SMTP_INSECURE: "${SMTP_INSECURE}" # If enabled, allows insecure connections to the external SMTP server.
            SMTP_PASSWORD: "${SMTP_PASSWORD}" # External SMTP email account password to login with.
            SMTP_PORT: "${SMTP_PORT}" # External SMTP port to connect to.
            SMTP_SENDER: "${SMTP_SENDER}" # SMTP address used for sending email notifications.
            SMTP_USERNAME: "${SMTP_USERNAME}" # External SMTP email account username to login with.
            START_ADDITIONAL_SERVICES: "notifications" # Additional services to start.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 1m
            test: "wget --spider http://127.0.0.1:9200 || exit 1"
            timeout: 3s
        labels:
            caddy: "${OPENCLOUD_URL}" # Tells Caddy to reverse proxy to the external OpenCloud URL.
            caddy.reverse_proxy: "opencloud:9200" # Tells Caddy to reverse proxy internal traffic on port 9200.
            caddy.tls.ca: "https://acme.zerossl.com/v2/DV90" # Use ZeroSSL as the CA issuer.
            caddy.tls.dns: "cloudflare $CLOUDFLARE_API_TOKEN" # Use Cloudflare for DNS challenges.
            caddy.tls.protocols: "tls1.3" # Requires clients to support TLS 1.3.
        networks:
            - external # External Caddy network; reverse proxy.
        ports:
            - ${OPENCLOUD_PORT:-9200}:9200/tcp # The Lounge web interface.
        security_opt:
            - no-new-privileges:true # Prevents privilege escalation.
        volumes:
            - opencloud-data:/var/lib/opencloud # OpenCloud data volume.
            - opencloud:/etc/opencloud # OpenCloud configuration volume.

    ###############################################################################################
    # Snapp: URL shortener.                                                                       #
    ###############################################################################################

    snapp:
        container_name: snapp
        image: uraniadev/snapp:latest
        env_file: ./.env
        hostname: snapp
        restart: unless-stopped
        environment:
            ADMIN_PASSWORD: "${SNAPP_PASSWORD:-password}" # Configures the default admin password.
            ADMIN_USERNAME: "${SNAPP_USERNAME:-admin}" # Configures the default admin username.
            ALLOW_UNSECURE_HTTP: "false" # Disallow shortening http-only links.
            DATABASE_PROVIDER: "sqlite" # Use SQLite as the database provider.
            DATABASE_URL: "file:./db.sqlite" # Use the local SQLite database.
            DISABLE_HOME: "true" # Disables the default landing page.
            ENABLE_SIGNUP: "false" # Do not allow public signups.
            ENABLED_MFA: "true" # Require MFA for all users.
            ORIGIN: "https://${SNAPP_URL}" # Configure the origin URL to be the published external URL.
            PUBLIC_URL: "https://${SNAPP_URL}" # Configures the public URL to be the published external URL.
            SMTP_FROM: "${SMTP_SENDER}" # External email server sender.
            SMTP_HOST: "${SMTP_HOST}" # External email server host.
            SMTP_PASS: "${SMTP_PASSWORD}" # External email server password.
            SMTP_PORT: "${SMTP_PORT}" # External email server port.
            SMTP_USER: "${SMTP_USERNAME}" # External email server username.
            TOKEN_SECRET: "${SNAPP_SECRET}" # Configures the secret to use.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 1m
            test: "curl -f http://127.0.0.1:3000/health || exit 1"
            timeout: 3s
        labels:
            caddy: "${SNAPP_URL}" # Tells Caddy to reverse proxy to the external The Lounge URL.
            caddy.reverse_proxy: "snapp:3000" # Tells Caddy to reverse proxy internal traffic on port 3000.
            caddy.tls.ca: "https://acme.zerossl.com/v2/DV90" # Use ZeroSSL as the CA issuer.
            caddy.tls.dns: "cloudflare $CLOUDFLARE_API_TOKEN" # Use Cloudflare for DNS challenges.
            caddy.tls.protocols: "tls1.3" # Requires clients to support TLS 1.3.
        networks:
            - external # External Caddy network; reverse proxy.
        ports:
            - ${SNAPP_PORT:-3000}:3000/tcp # Snapp web interface.
        security_opt:
            - no-new-privileges:true # Prevents privilege escalation.
        volumes:
            - "${SNAPP_PATH}/db.sqlite:/app/dbschema/sqlite/prisma/db.sqlite" # Configuration and data volume.

    ###############################################################################################
    # The Lounge: IRC client.                                                                     #
    ###############################################################################################

    thelounge:
        container_name: thelounge
        image: lscr.io/linuxserver/thelounge:latest
        env_file: ./.env
        hostname: thelounge
        restart: unless-stopped
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 1m
            test: "curl -f http://127.0.0.1:9000 || exit 1"
            timeout: 3s
        labels:
            caddy: "${THELOUNGE_URL}" # Tells Caddy to reverse proxy to the external The Lounge URL.
            caddy.reverse_proxy: "thelounge:9000" # Tells Caddy to reverse proxy internal traffic on port 9000.
            caddy.tls.ca: "https://acme.zerossl.com/v2/DV90" # Use ZeroSSL as the CA issuer.
            caddy.tls.dns: "cloudflare $CLOUDFLARE_API_TOKEN" # Use Cloudflare for DNS challenges.
            caddy.tls.protocols: "tls1.3" # Requires clients to support TLS 1.3.
        networks:
            - external # External Caddy network; reverse proxy.
        ports:
            - ${THELOUNGE_PORT:-9000}:9000/tcp # The Lounge web interface.
        security_opt:
            - no-new-privileges:true # Prevents privilege escalation.
        volumes:
            - thelounge:/config # The Lounge configuration and database volume.

networks:
    external:
        external: true
        name: external-network # $ docker network create external-network
    socket-proxy:
        external: true
        name: socket-proxy-network # $ docker network create socket-proxy-network

volumes:
    caddy:
        external: true
        name: caddy-volume # $ docker volume create caddy-volume
    jellyfin:
        name: jellyfin-volume # $ docker volume create jellyfin-volume
        external: true
    opencloud:
        name: opencloud-volume # $ docker volume create opencloud-volume
        external: true
    media-library:
        driver_opts:
            device: "${MEDIA_LIBRARY_PATH}" # Root path to the media library.
            o: bind
            type: none
        name: media-library-volume
    opencloud-data:
        driver_opts:
            device: "${OPENCLOUD_PATH}" # Root path to store OpenCloud user data.
            o: bind
            type: none
        name: opencloud-data-volume
    thelounge:
        driver_opts:
            device: "${THELOUNGE_PATH}" # Root path to store The Lounge data.
            o: bind
            type: none
        name: thelounge-volume
