---
name: cloud

# Default container options.
x-defaults: &defaults
    restart: unless-stopped
    env_file: ./.env
    networks:
        - media # Internal media network.
        - external # External network; reverse proxied.
    security_opt:
        - no-new-privileges:true # Prevents privilege escalation.

# Default labels options.
x-defaults-labels: &defaults-labels
    caddy.tls.ca: "https://acme.zerossl.com/v2/DV90" # Use ZeroSSL as the CA issuer.
    # caddy.tls.dns: "cloudflare $CLOUDFLARE_API_TOKEN" # Use Cloudflare for DNS challenges.
    caddy.tls.protocols: "tls1.3" # Requires clients to support TLS 1.3.

# Default healthcheck options.
x-defaults-healthcheck: &defaults-healthcheck
    interval: 1m
    retries: 3
    start_period: 30s
    timeout: 3s

services:
    #############################################
    # OpenCloud: Self-hosted cloud storage.     #
    #############################################

    opencloud:
        <<: *defaults
        image: opencloudeu/opencloud-rolling:latest
        container_name: opencloud
        entrypoint: /bin/sh
        hostname: opencloud
        command:
            ["-c", "opencloud init --insecure true || true; opencloud server"]
        environment:
            FRONTEND_ARCHIVER_MAX_SIZE: "10000000000" # Max number of files that can be packed into an archive.
            IDM_ADMIN_PASSWORD: "${OPENCLOUD_ADMIN_PASSWORD}" # Configures the initial admin password.
            IDM_CREATE_DEMO_USERS: "false" # Do not create demo users.
            OC_INSECURE: "false" # Do not run in insecure mode.
            OC_LOG_COLOR: "true" # Log in color.
            OC_LOG_LEVEL: "info" # Log at the info level.
            OC_LOG_PRETTY: "true" # Use pretty logs.
            OC_URL: "https://${OPENCLOUD_URL}" # Configures the OpenCloud URL.
            PROXY_TLS: "false" # Do not use SSL between the reverse proxy and OpenCloud.
            SMTP_TRANSPORT_ENCRYPTION: "${SMTP_TRANSPORT_ENCRYPTION}" # External SMTP port to connect to.
            SMTP_HOST: "${SMTP_HOST}" # External SMTP host URL to connect to.
            SMTP_INSECURE: "${SMTP_INSECURE}" # If enabled, allows insecure connections to the external SMTP server.
            SMTP_PASSWORD: "${SMTP_PASSWORD}" # External SMTP email account password to login with.
            SMTP_PORT: "${SMTP_PORT}" # External SMTP port to connect to.
            SMTP_SENDER: "${SMTP_SENDER}" # SMTP address used for sending email notifications.
            SMTP_USERNAME: "${SMTP_USERNAME}" # External SMTP email account username to login with.
            START_ADDITIONAL_SERVICES: "notifications" # Additional services to start.
        healthcheck:
            <<: *defaults-healthcheck
            test: "wget --spider http://127.0.0.1:9200 || exit 1"
        labels:
            <<: *defaults-labels
            caddy: "${OPENCLOUD_URL}" # Tells Caddy to reverse proxy to the external OpenCloud URL.
            caddy.reverse_proxy: "opencloud:9200" # Tells Caddy to reverse proxy internal traffic on port 9200.
        ports:
            - ${OPENCLOUD_PORT:-9200}:9200/tcp # OpenCloud web interface.
        volumes:
            - opencloud-data:/var/lib/opencloud # OpenCloud data volume.
            - opencloud:/etc/opencloud # OpenCloud configuration volume.

    #############################################
    # Snapp: Self-hosted URL shortener.         #
    #############################################

    snapp:
        <<: *defaults
        image: uraniadev/snapp:latest
        container_name: snapp
        hostname: snapp
        environment:
            ADMIN_PASSWORD: "${SNAPP_PASSWORD:-password}" # Configures the default admin password.
            ADMIN_USERNAME: "${SNAPP_USERNAME:-admin}" # Configures the default admin username.
            ALLOW_UNSECURE_HTTP: "false" # Disallow shortening http-only links.
            DATABASE_PROVIDER: "sqlite" # Use SQLite as the database provider.
            DATABASE_URL: "file:./db.sqlite" # Use the local SQLite database.
            DISABLE_HOME: "true" # Disables the default landing page.
            ENABLE_SIGNUP: "false" # Do not allow public signups.
            ENABLED_MFA: "true" # Require MFA for all users.
            ORIGIN: "https://${SNAPP_URL}" # Configure the origin URL to be the published external URL.
            PUBLIC_URL: "https://${SNAPP_URL}" # Configures the public URL to be the published external URL.
            SMTP_FROM: "${SMTP_SENDER}" # External email server sender.
            SMTP_HOST: "${SMTP_HOST}" # External email server host.
            SMTP_PASS: "${SMTP_PASSWORD}" # External email server password.
            SMTP_PORT: "${SMTP_PORT}" # External email server port.
            SMTP_USER: "${SMTP_USERNAME}" # External email server username.
            TOKEN_SECRET: "${SNAPP_SECRET}" # Configures the secret to use.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:3000/health || exit 1"
        labels:
            <<: *defaults-labels
            caddy: "${SNAPP_URL}" # Tells Caddy to reverse proxy to the external Snapp URL.
            caddy.reverse_proxy: "snapp:3000" # Tells Caddy to reverse proxy internal traffic on port 3000.
        ports:
            - ${SNAPP_PORT:-300}:3000/tcp # The Lounge web interface.
        volumes:
            - "${SNAPP_PATH}/db.sqlite:/app/dbschema/sqlite/prisma/db.sqlite" # Configuration and data volume.

    #############################################
    # The Lounge: Self-hosted IRC client.       #
    #############################################

    thelounge:
        <<: *defaults
        image: lscr.io/linuxserver/thelounge:latest
        container_name: thelounge
        hostname: thelounge
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:9000 || exit 1"
        labels:
            <<: *defaults-labels
            caddy: "${THELOUNGE_URL}" # Tells Caddy to reverse proxy to the external The Lounge URL.
            caddy.reverse_proxy: "thelounge:9000" # Tells Caddy to reverse proxy internal traffic on port 9000.
        ports:
            - ${THELOUNGE_PORT:-9000}:9000/tcp # The Lounge web interface.
        volumes:
            - thelounge:/config # The Lounge configuration and database volume.

networks:
    cloud:
        external: true
        name: cloud-network # $ docker network create cloud-network
    external:
        external: true
        name: external-network # $ docker network create external-network

volumes:
    opencloud:
        name: opencloud-volume # $ docker volume create opencloud-volume
        external: true
    opencloud-data:
        driver_opts:
            device: "${OPENCLOUD_PATH}" # Root path to store OpenCloud user data.
            o: bind
            type: none
        name: opencloud-data-volume
    thelounge:
        driver_opts:
            device: "${THELOUNGE_PATH}" # Root path to store The Lounge data.
            o: bind
            type: none
