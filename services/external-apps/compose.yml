---
name: external-apps

include:
    - ./cloud/compose.yml # Cloud stack.

# Default container options.
x-defaults: &defaults
    restart: unless-stopped
    env_file: ./.env
    networks:
        - external # External apps network; reverse proxied.
    security_opt:
        - no-new-privileges:true # Prevents privilege escalation.

# Default labels options.
x-defaults-labels: &defaults-labels
    caddy.tls.ca: "https://acme.zerossl.com/v2/DV90" # Use ZeroSSL as the CA issuer.
    caddy.tls.protocols: "tls1.3" # Requires clients to support TLS 1.3.

# Default healthcheck options.
x-defaults-healthcheck: &defaults-healthcheck
    interval: 1m
    retries: 3
    start_period: 30s
    timeout: 3s

services:
    #############################################
    # Jellyfin: Media server.                   #
    #############################################

    jellyfin:
        image: lscr.io/linuxserver/jellyfin:latest
        container_name: jellyfin
        hostname: jellyfin
        restart: unless-stopped
        devices:
            - /dev/dri/renderD128:/dev/dri/renderD128 # Video device support; renderD128 is GPU0.
        environment:
            DOCKER_MODS: "linuxserver/mods:jellyfin-opencl-intel:latest" # Enables the latest OpenCL drivers.
            JELLYFIN_PublishedServerUrl: "https://${JELLYFIN_URL}" # Configures autodiscovery to use the external URL.
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
        labels:
            caddy: "${JELLYFIN_URL}" # Tells Caddy to reverse proxy to the external Jellyfin URL.
            caddy.reverse_proxy: "jellyfin:8096" # Tells Caddy to reverse proxy internal traffic on port 8096.
            caddy.tls.ca: "https://acme.zerossl.com/v2/DV90" # Use ZeroSSL as the CA issuer.
            caddy.tls.protocols: "tls1.3" # Requires clients to support TLS 1.3.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 1m
            test: "curl -f http://127.0.0.1:8096/health || exit 1"
            timeout: 3s
        networks:
            - external # External apps network; reverse proxied.
        ports:
            - ${JELLYFIN_PORT:-8096}:8096/tcp # Jellyfin web interface.
        security_opt:
            - no-new-privileges:true # Prevents privilege escalation.
        volumes:
            - jellyfin:/config # Jellyfin configuration and database.
            - jellyfin-media-library:/library:ro # Root path to the media library, read-only.

    #############################################
    # Snapp: Self-hosted URL shortener.         #
    #############################################

    snapp:
        <<: *defaults
        image: uraniadev/snapp:latest
        container_name: snapp
        hostname: snapp
        environment:
            ADMIN_PASSWORD: "${SNAPP_PASSWORD:-password}" # Configures the default admin password.
            ADMIN_USERNAME: "${SNAPP_USERNAME:-admin}" # Configures the default admin username.
            ALLOW_UNSECURE_HTTP: "false" # Disallow shortening http-only links.
            DATABASE_PROVIDER: "sqlite" # Use SQLite as the database provider.
            DATABASE_URL: "file:./db.sqlite" # Use the local SQLite database.
            DISABLE_HOME: "true" # Disables the default landing page.
            ENABLE_SIGNUP: "false" # Do not allow public signups.
            ENABLED_MFA: "true" # Require MFA for all users.
            ORIGIN: "https://${SNAPP_URL}" # Configure the origin URL to be the published external URL.
            PUBLIC_URL: "https://${SNAPP_URL}" # Configures the public URL to be the published external URL.
            SMTP_FROM: "${SMTP_SENDER}" # External email server sender.
            SMTP_HOST: "${SMTP_HOST}" # External email server host.
            SMTP_PASS: "${SMTP_PASSWORD}" # External email server password.
            SMTP_PORT: "${SMTP_PORT}" # External email server port.
            SMTP_USER: "${SMTP_USERNAME}" # External email server username.
            TOKEN_SECRET: "${SNAPP_SECRET}" # Configures the secret to use.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:3000/health || exit 1"
        labels:
            <<: *defaults-labels
            caddy: "${SNAPP_URL}" # Tells Caddy to reverse proxy to the external Snapp URL.
            caddy.reverse_proxy: "snapp:3000" # Tells Caddy to reverse proxy internal traffic on port 3000.
        ports:
            - ${SNAPP_PORT:-300}:3000/tcp # The Lounge web interface.
        volumes:
            - "${SNAPP_PATH}/db.sqlite:/app/dbschema/sqlite/prisma/db.sqlite" # Configuration and data volume.

    #############################################
    # The Lounge: Self-hosted IRC client.       #
    #############################################

    thelounge:
        <<: *defaults
        image: lscr.io/linuxserver/thelounge:latest
        container_name: thelounge
        hostname: thelounge
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:9000 || exit 1"
        labels:
            <<: *defaults-labels
            caddy: "${THELOUNGE_URL}" # Tells Caddy to reverse proxy to the external The Lounge URL.
            caddy.reverse_proxy: "thelounge:9000" # Tells Caddy to reverse proxy internal traffic on port 9000.
        ports:
            - ${THELOUNGE_PORT:-9000}:9000/tcp # The Lounge web interface.
        volumes:
            - thelounge:/config # The Lounge configuration and database volume.

    #############################################
    # Vaultwarden: Bitwarden-compatible server. #
    #############################################

    vaultwarden:
        <<: *defaults
        image: vaultwarden/server:latest
        container_name: vaultwarden
        hostname: vaultwarden
        environment:
            ADMIN_RATELIMIT_MAX_BURST: "3" # Configures admin ratelimit.
            ADMIN_RATELIMIT_SECONDS: "300" # Configures admin ratelimit cooldown.
            ADMIN_TOKEN: "${VAULTWARDEN_ADMIN_TOKEN}" # Admin encryption token.
            DOMAIN: "https://${VAULTWARDEN_URL}" # Configures the domain to use.
            EMAIL_CHANGE_ALLOWED: "true" # Enables email changing.
            EMERGENCY_ACCESS_ALLOWED: "true" # Enables emergency access.
            LOGIN_RATELIMIT_MAX_BURST: "10" # Configures ratelimits.
            LOGIN_RATELIMIT_SECONDS: "60" # Configures ratelimit cooldown.
            SENDS_ALLOWED: "true" # Enables Bitwarden sends.
            SIGNUPS_ALLOWED: "${VAULTWARDEN_SIGNUPS}" # Configures if signups should be enabled.
            SMTP_FROM: "${SMTP_SENDER}" # External email server sender.
            SMTP_HOST: "${SMTP_HOST}" # External email server host.
            SMTP_PASSWORD: "${SMTP_PASSWORD}" # External email server password.
            SMTP_PORT: "${SMTP_PORT}" # External email server port.
            SMTP_SECURITY: force_tls # External email server encryption method.
            SMTP_TIMEOUT: "${SMTP_TIMEOUT}" # 15s timeout.
            SMTP_USERNAME: "${SMTP_USERNAME}" # External email server username.
            WEB_VAULT_ENABLED: "true" # Enables the web vault.
            WEBSOCKET_ENABLED: "true" # Enable WS support.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:80/alive || exit 1"
        labels:
            <<: *defaults-labels
            caddy: "${VAULTWARDEN_URL}" # Tells Caddy to reverse proxy to the external The Lounge URL.
            caddy.reverse_proxy: "vaultwarden:80" # Tells Caddy to reverse proxy internal traffic on port 80.
        ports:
            - ${VAULTWARDEN_PORT:-11001}:80/tcp # Vaultwarden server and web interface.
        volumes:
            - vaultwarden:/data # Vaultwarden user data.

networks:
    external:
        external: true
        name: external-network # $ docker network create external-network

volumes:
    jellyfin:
        external: true
        name: jellyfin-volume # $ docker volume create jellyfin
    jellyfin-media-library:
        name: jellyfin-media-library-volume
        driver_opts:
            device: "${MEDIA_LIBRARY_PATH}" # Root path to the media library.
            o: bind
            type: none
    thelounge:
        driver_opts:
            device: "${THELOUNGE_PATH}" # Root path to store The Lounge data.
            o: bind
            type: none
    vaultwarden:
        driver_opts:
            device: "${VAULTWARDEN_PATH}" # Root path to store Vaultwarden data.
            o: bind
            type: none
