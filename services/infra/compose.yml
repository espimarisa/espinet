---
name: infra

# Default environment variables.
x-defaults-env: &defaults-env
    PGID: "${PGID}" # Local group to run as.
    PUID: "${PUID}" # Local user to run as.
    TZ: "${TZ}" # Configures the timezone to use.
    UMASK: "${UMASK}" # Default umask to apply to newly created files.

# Default options.
x-defaults: &defaults
    restart: unless-stopped
    environment: *defaults-env
    security_opt:
        - no-new-privileges:true

services:
    ###############################################################################
    # Caddy: Reverse proxy and web server with automatic HTTPS support.           #
    ###############################################################################

    caddy:
        <<: *defaults
        image: ghcr.io/homeall/caddy-reverse-proxy-cloudflare:2025.09.16
        container_name: caddy
        hostname: caddy
        depends_on:
            socket-proxy:
                condition: service_healthy
                restart: true
        dns: # Bypass local DNS rewrites so we can actually get certs.
            - "1.1.1.1"
            - "1.0.0.1"
        environment:
            <<: *defaults-env
            CADDY_INGRESS_NETWORKS: "caddy" # Listen for traffic coming from the caddy network.
            CLOUDFLARE_API_TOKEN: "${CLOUDFLARE_API_TOKEN}" # Cloudflare account token with DNS Zone editing to domains.
            DOCKER_HOST: "tcp://socket-proxy:2375" # Connect to the socket proxy.
        labels:
            caddy_0: "(internal)" # Internal directive.
            caddy_0.@external: "not remote_ip private_ranges" # Defines external ranges for the internal directive.
            caddy_0.@internal: "remote_ip private_ranges" # Defines internal ranges for the internal directive.
            caddy_0.respond: "@external `Forbidden` 403" # Throw 403 for external ranges in the internal directive.
            caddy_0.reverse_proxy: "@internal {args[:]}" # Reverse proxy internal traffic.
            caddy_1: "(external)" # External directive.
            caddy_1.reverse_proxy: "{args[:]}" # Reverse proxy external traffic.
            caddy.acme_dns: "cloudflare $CLOUDFLARE_API_TOKEN" # Use Cloudflare for ACME DNS challenges.
            caddy.email: "${ACME_EMAIL}" # Email to use for ACME DNS challenges.
        networks:
            - caddy
            - socket-proxy
        ports:
            - 80:80/tcp # HTTP traffic.
            - 443:443/tcp # HTTPS traffic.
            - 443:443/udp # HTTPS traffic.
        volumes:
            - caddy:/data

    ###############################################################################
    # Cloudflare-DDNS: Dynamically update Cloudflare DNS records.                 #
    ###############################################################################

    cloudflare-ddns:
        <<: *defaults
        image: favonia/cloudflare-ddns:1
        container_name: cloudflare-ddns
        network_mode: host # Makes getting IPV6 more consistent.
        read_only: true
        user: ${PUID}:${PGID}
        cap_drop:
            - ALL # Remove all permissions.
        environment:
            <<: *defaults-env
            CLOUDFLARE_API_TOKEN: "${CLOUDFLARE_API_TOKEN}" # Scoped Cloudflare account token with DNS Zone edit permissions.
            DOMAINS: "${CLOUDFLARE_DOMAINS}" # List of domains to update DNS records for.
            EMOJI: "false" # Disable emoji inside of log files.
            PROXIED: "false" # Disable proxying service traffic through Cloudflare.
            UPDATE_CRON: "@every 1h" # Checks for an updated IP address every hour.

    ###############################################################################
    # Socket Proxy: Proxies the Docker Socket for increased security.             #
    ###############################################################################

    socket-proxy:
        <<: *defaults
        image: ghcr.io/wollomatic/socket-proxy:1.9.0
        container_name: socket-proxy
        hostname: socket-proxy
        read_only: true
        user: 65534:${DOCKER_GID} # Run as an arbitrary UID in the Docker group.
        cap_drop:
            - ALL # Drop default Docker capabilities.
        environment:
            <<: *defaults-env
            SP_ALLOW_GET: '(/v1\..{1,2})?/(_ping|version|info|containers/(json|\w+/json|\w+/stats.*|\w+/logs.*)|images/\S+/json|networks(/.*)?|events(\?\S+)?)' # Required GET requests for certain containers.
            SP_ALLOW_POST: '(/v1\..{1,2})?/containers/\w+/(start|stop|restart)' # Allow container actions.
            SP_ALLOW_HEAD: '(/v1\..{1,2})?/(_ping)'
            SP_ALLOWFROM: "caddy,dozzle" # Only allow traffic from specified containers.
            SP_ALLOWHEALTHCHECK: "true" # Enables healthcheck support.
            SP_LISTENIP: "0.0.0.0" # Only listen on 0.0.0.0.
        healthcheck:
            interval: 10s
            test: ["CMD", "./healthcheck"]
            timeout: 3s
        networks:
            - socket-proxy
        ports:
            - 2375:2375/tcp # Socket proxy port.
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro # Host Docker socket mount.

networks:
    caddy:
        external: true
        name: caddy-network # $ docker network create caddy-network
    socket-proxy:
        external: true # $ docker network create --internal=true socket-proxy-network
        internal: true # Isolates the network from the outside.
        name: socket-proxy-network # Internal-only network used only for Socket Proxy traffic.

volumes:
    caddy:
        external: true
        name: caddy-volume # $ docker volume create caddy-volume
