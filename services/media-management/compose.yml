---
name: media-management

# Repeated volumes.
x-downloads-volume: &volume-downloads downloads:/downloads # Root path to the downloads volume.
x-media-library-volume: &volume-media-library media-library:/library # Root path to the downloads volume.

# Default environment variables.
x-defaults-env: &defaults-env
    PGID: "${PGID}" # Local group to run as.
    PUID: "${PUID}" # Local user to run as.
    TZ: "${TZ}" # Local timezone to use.
    UMASK: "${UMASK}" # Umask to apply to newly created files.

# Default healthcheck options.
x-defaults-healthcheck: &defaults-healthcheck
    interval: 30s
    retries: 3
    start_period: 30s
    timeout: 3s

# Default container options.
x-defaults: &defaults
    restart: unless-stopped
    env_file: ./.env
    network_mode: service:gluetun
    environment: *defaults-env
    security_opt:
        - no-new-privileges:true # Prevents privilege escalation.

services:
    #############################################
    # Gluetun: VPN client.                      #
    #############################################

    gluetun:
        image: ghcr.io/qdm12/gluetun:latest
        container_name: gluetun
        hostname: gluetun
        cap_add:
            - NET_ADMIN # Required for Wireguard configuration.
        devices:
            - /dev/net/tun:/dev/net/tun # TUN/TAP device passthrough.
        environment:
            <<: *defaults-env
            BLOCK_ADS: "off" # https://github.com/qdm12/gluetun/issues/765
            BLOCK_MALICIOUS: "off" # https://github.com/qdm12/gluetun/issues/765
            BLOCK_SURVEILLANCE: "off" # https://github.com/qdm12/gluetun/issues/765
            FIREWALL_OUTBOUND_SUBNETS: "${FIREWALL_OUTBOUND_SUBNETS}" # List of local subnets allowed to access the gluetun network.
            FIREWALL_VPN_INPUT_PORTS: "${FIREWALL_VPN_INPUT_PORTS}" # Ports to use for server-side VPN forwarding; provided by VPN service provider.
            HEALTH_TARGET_ADDRESS: "quad9.net:443" # Ping Quad9 for healthchecks, Cloudflare is iffy.
            HEALTH_VPN_DURATION_INITIAL: "60s" # https://github.com/qdm12/gluetun-wiki/blob/main/setup/options/healthcheck.md
            SERVER_REGIONS: "${SERVER_REGIONS}" # VPN server regions to connect to.
            UPDATER_PERIOD: "24h" # Update server data every 24 hours.
            VPN_SERVICE_PROVIDER: "${VPN_SERVICE_PROVIDER}" # https://github.com/qdm12/gluetun-wiki/tree/main/setup/providers
            VPN_TYPE: "wireguard" # Use Wireguard for VPN connections.
            WIREGUARD_ADDRESSES: "${WIREGUARD_ADDRESSES}" # Addresses to use for Wireguard.
            WIREGUARD_ENDPOINT_PORT: "${WIREGUARD_ENDPOINT_PORT}" # Port to use for Wireguard.
            WIREGUARD_MTU: "1380" # Use a lower MTU for stability/performance.
            WIREGUARD_PERSISTENT_KEEPALIVE_INTERVAL: "25s" # Keep Wireguard alive a little longer.
            WIREGUARD_PRESHARED_KEY: "${WIREGUARD_PRESHARED_KEY}" # Preshared key from the VPN provider's configuration file.
            WIREGUARD_PRIVATE_KEY: "${WIREGUARD_PRIVATE_KEY}" # PrivateKey from the VPN provider's configuration file.
        networks:
            - gluetun # Gluetun VPN network.
        ports:
            - ${CLEANUPARR_PORT:-11011}:11011/tcp # Cleanuparr web interface.
            - ${DEEMIX_PORT:-6595}:6595/tcp # Deemix port.
            - ${FLARESOLVERR_PORT:-8191}:8191/tcp # Flaresolverr server.
            - ${LIDARR_PORT:-8686}:8686/tcp # Lidarr web interface.
            - ${PROFILARR_PORT:-6868}:6868/tcp # Profilarr web interface.
            - ${PROWLARR_PORT:-9696}:9696/tcp # Prowlarr web interface.
            - ${QBITTORRENT_PORT:-8080}:${QBITTORRENT_PORT:-8080}/tcp # qBittorrent web interface.
            - ${RADARR_PORT:-7878}:7878/tcp # Readarr web interface.
            - ${READARR_PORT:-8787}:8787/tcp # Readarr web interface.
            - ${SONARR_PORT:-8989}:8989/tcp # Sonarr web interface.
        security_opt:
            - no-new-privileges:true # Prevents privilege escalation.
        volumes:
            - gluetun:/gluetun # Gluetun configuration.

    #############################################
    # qBittorrent: BitTorrent client.           #
    #############################################

    qbittorrent:
        <<: *defaults
        image: lscr.io/linuxserver/qbittorrent:latest
        container_name: qbittorrent
        network_mode: service:gluetun # Route all traffic through Gluetun.
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            <<: *defaults-env
            DOCKER_MODS: "ghcr.io/gabe565/linuxserver-mod-vuetorrent" # Auto-install Vuetorrent to /vuetorrent.
            WEBUI_PORT: "${QBITTORRENT_PORT:-8080}" # Sets the web interface port.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:${QBITTORRENT_PORT:-8080} || exit 1"
        volumes:
            - *volume-downloads # Root path to store downloaded files into.
            - qbittorrent:/config # qBittorrent configuration and database.

    #############################################
    # Deemix: Deezer music downloader.          #
    #############################################

    deemix:
        <<: *defaults
        image: ghcr.io/bambanah/deemix:latest
        container_name: deemix
        network_mode: service:gluetun # Route all networking through Gluetun.
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            <<: *defaults-env
            DEEMIX_SINGLE_USER: "true" # Use one global user.
            UMASK_SET: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:6595 || exit 1"
        volumes:
            - *volume-downloads # Root path to store downloaded files into.
            - deemix:/config # Deemix configuration volume.

    #############################################
    # Lidarr: Music manager and organizer.      #
    #############################################

    lidarr:
        <<: *defaults
        image: ghcr.io/hotio/lidarr:pr-plugins
        container_name: lidarr
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:8686/ping || exit 1"
        volumes:
            - *volume-downloads
            - *volume-media-library
            - lidarr:/config # Lidarr configuration and database.

    #############################################
    # Radarr: Movie manager and PVR.            #
    #############################################

    radarr:
        <<: *defaults
        image: lscr.io/linuxserver/radarr:latest
        container_name: radarr
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:7878/ping || exit 1"
        volumes:
            - *volume-downloads
            - *volume-media-library
            - radarr:/config # Radarr configuration and database.

    #############################################
    # Readarr: Book manager and PVR.            #
    #############################################

    readarr:
        <<: *defaults
        image: ghcr.io/pennydreadful/bookshelf:hardcover
        container_name: readarr
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:8787/ping || exit 1"
        volumes:
            - *volume-downloads
            - *volume-media-library
            - readarr:/config # Readarr configuration and database.

    #############################################
    # Sonarr: TV/Anime manager and PVR.         #
    #############################################

    sonarr:
        <<: *defaults
        image: lscr.io/linuxserver/sonarr:latest
        container_name: sonarr
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:8989/ping || exit 1"
        volumes:
            - *volume-downloads
            - *volume-media-library
            - sonarr:/config # Sonarr configuration and database.

    #############################################
    # Prowlarr: Indexer and tracker manager.    #
    #############################################

    prowlarr:
        <<: *defaults
        image: lscr.io/linuxserver/prowlarr:latest
        container_name: prowlarr
        network_mode: service:gluetun # Route all networking through Gluetun.
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            <<: *defaults-env
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:9696/ping || exit 1"
        volumes:
            - prowlarr:/config # Prowlarr configuration volume.

    #############################################
    # Flaresolverr: Bypass Cloudflare captchas. #
    #############################################

    flaresolverr:
        <<: *defaults
        image: ghcr.io/flaresolverr/flaresolverr:latest
        container_name: flaresolverr
        network_mode: service:gluetun # Route all networking through Gluetun.
        user: ${PUID}:${PGID}
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            <<: *defaults-env
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:8191/health || exit 1"

    #############################################
    # Profilarr: Profile manager for 'ARR apps. #
    #############################################

    profilarr:
        <<: *defaults
        image: santiagosayshey/profilarr:latest
        container_name: profilarr
        volumes:
            - profilarr:/config # Profilarr configuration and database.

    #############################################
    # Cleanuparr: Automatically clean ARR apps. #
    #############################################

    cleanuparr:
        <<: *defaults
        image: ghcr.io/cleanuparr/cleanuparr:latest
        container_name: cleanuparr
        volumes:
            - cleanuparr:/config # Cleanuparr configuration and database.

    #############################################
    # Unpackerr: Automatic download extraction. #
    #############################################

    unpackerr:
        <<: *defaults
        image: ghcr.io/unpackerr/unpackerr:latest
        container_name: unpackerr
        restart: unless-stopped
        environment:
            <<: *defaults-env
            UN_LOG_FILE: "/downloads/unpackerr.log" # Log file location.
            UN_RADARR_0_API_KEY: "${RADARR_API_KEY}" # Radarr API key.
            UN_RADARR_0_URL: "http://localhost:7878" # Primary Radarr URL.
            UN_SONARR_0_API_KEY: "${SONARR_API_KEY}" # Sonarr API key.
            UN_SONARR_0_URL: "http://localhost:8989" # Primary Sonarr URL.
        volumes:
            - *volume-downloads # Root path to store downloaded files into.

    #############################################
    # mam-ip-helper: MyAnonaMouse IP updater.   #
    #############################################

    mam-ip-helper:
        <<: *defaults
        image: tyzen9/myanonamouse-ip-helper:latest
        container_name: mam-ip-helper
        network_mode: "service:gluetun" # Route all networking through Gluetun.
        read_only: true
        user: ${PUID}:${PGID}
        cap_drop:
            - ALL # Remove all permissions.
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            MAM_ID: "${MAM_ID}" # MyAnonaMouse session ID.

networks:
    gluetun:
        external: true
        name: gluetun-network # $ docker network create gluetun-network

volumes:
    deemix:
        external: true
        name: deemix-volume # $ docker volume create deemix-volume
    gluetun:
        external: true
        name: gluetun-volume # $ docker volume create gluetun-volume
    lidarr:
        external: true
        name: lidarr-volume # $ docker volume create lidarr-volume
    radarr:
        external: true
        name: radarr-volume # $ docker volume create radarr-volume
    readarr:
        external: true
        name: readarr-volume # $ docker volume create readarr-volume
    sonarr:
        external: true
        name: sonarr-volume # $ docker volume create sonarr-volume
    profilarr:
        external: true
        name: profilarr-volume # $ docker volume create profilarr-volume
    cleanuparr:
        external: true
        name: cleanuparr-volume # $ docker volume create cleanuparr-volume
    prowlarr:
        external: true
        name: prowlarr-volume # $ docker volume create prowlarr-volume
    qbittorrent:
        external: true
        name: qbittorrent-volume # $ docker volume create qbittorrent-volume
    downloads:
        name: downloads-volume
        driver_opts:
            device: "${DOWNLOADS_PATH}" # Root path to store downloaded files into.
            o: bind
            type: none
    media-library:
        name: media-library-volume
        driver_opts:
            device: "${MEDIA_LIBRARY_PATH}" # Root path to the media library.
            o: bind
            type: none
