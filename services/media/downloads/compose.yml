---
services:
    # Gluetun: VPN client. I use AirVPN currently, see the Gluetun wiki for more.
    gluetun:
        image: ghcr.io/qdm12/gluetun:v3.40.0
        container_name: gluetun
        hostname: gluetun
        restart: unless-stopped
        devices:
            - /dev/net/tun:/dev/net/tun # TUN/TAP device passthrough.
        environment:
            BLOCK_MALICIOUS: "off" # Disables Unbound, lowers RAM usage. https://github.com/qdm12/gluetun/issues/765
            FIREWALL_OUTBOUND_SUBNETS: "${FIREWALL_OUTBOUND_SUBNETS}" # List of subnets allowed to communicate with Gluetun over the gateway.
            FIREWALL_VPN_INPUT_PORTS: "${FIREWALL_VPN_INPUT_PORTS}" # List of VPN server-side port forwarded ports.
            HEALTH_VPN_DURATION_INITIAL: "30s" # Increase the initial healthcheck time to reduce false-positive failures.
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            SERVER_CITIES: "${SERVER_CITIES}" # Optional list of server cities to connect to.
            SERVER_COUNTRIES: "${SERVER_COUNTRIES}" # Optional list of server countries to connect to.
            SERVER_HOSTNAMES: "${SERVER_HOSTNAMES}" # Optional list of server hostnames to connect to.
            SERVER_NAMES: "${SERVER_NAMES}" # Optional list of server names to connect to.
            SERVER_REGIONS: "${SERVER_REGIONS}" # Optional list of server regions to connect to.
            TZ: "${TZ}" # Configures the timezone to use.
            UPDATER_PERIOD: "24h" # Update server data every 24 hours.
            VPN_SERVICE_PROVIDER: "${VPN_SERVICE_PROVIDER}" # https://github.com/qdm12/gluetun-wiki/blob/main/setup/providers
            VPN_TYPE: "wireguard" # Use Wireguard for VPN connections.
            WIREGUARD_ADDRESSES: "${WIREGUARD_ADDRESSES}" # Address(es) from Wireguard config (i.e 10.XXX.XXX.XXX/32).
            WIREGUARD_ENDPOINT_PORT: "${WIREGUARD_ENDPOINT_PORT}" # Endpoint port from Wireguard config.
            WIREGUARD_MTU: "1380" # Use a lower MTU, I was able to get the best AirVPN performance at 1380.
            WIREGUARD_PERSISTENT_KEEPALIVE_INTERVAL: "25s" # Increase the keepalive time a lil bit.
            WIREGUARD_PRESHARED_KEY: "${WIREGUARD_PRESHARED_KEY}" # PresharedKey from Wireguard config.
            WIREGUARD_PRIVATE_KEY: "${WIREGUARD_PRIVATE_KEY}" # PrivateKey from Wireguard config.
            WIREGUARD_PUBLIC_KEY: "${WIREGUARD_PUBLIC_KEY}" # PublicKey from Wireguard config.
        expose:
            - ${SOULSEEK_PORT:-50300}/tcp # Soulseek traffic.
            - 5030/tcp # slskd web interface.
            - 8080/tcp # qBittorrent web interface.
            - 8191/tcp # Flaresolverr server.
            - 9696/tcp # Prowlarr web interface.
        networks:
            - caddy
            - gluetun
        volumes:
            - gluetun:/gluetun
        cap_add:
            - NET_ADMIN # Required for Wireguard configuration.
        cap_drop:
            - AUDIT_WRITE
            - MKNOD
            - SYS_CHROOT
        security_opt:
            - no-new-privileges:true

    # qBittorrent: BitTorrent client.
    qbittorrent:
        image: ghcr.io/11notes/qbittorrent:5.1.2
        container_name: qbittorrent
        network_mode: service:gluetun # Route all traffic through Gluetun.
        read_only: true
        restart: unless-stopped
        environment:
            TZ: "${TZ}" # Configures the timezone to use.
        volumes:
            - downloads:/downloads
            - qbittorrent-config:/qbittorrent/etc
            - qbittorrent-data:/qbittorrent/var
        cap_drop:
            - ALL
        depends_on:
            gluetun:
                condition: service_healthy
                restart: true
        security_opt:
            - no-new-privileges:true

    # Prowlarr: Indexer manager.
    prowlarr:
        image: ghcr.io/11notes/prowlarr:2.0.5
        container_name: prowlarr
        network_mode: service:gluetun # Route all traffic through Gluetun.
        restart: unless-stopped
        read_only: true
        tmpfs: /tmp:uid=1000,gid=1000
        environment:
            TZ: "${TZ}" # Configures the timezone to use.
        volumes:
            - downloads:/downloads
            - prowlarr:/prowlarr/etc
        cap_drop:
            - ALL
        depends_on:
            gluetun:
                condition: service_healthy
                restart: true
        security_opt:
            - no-new-privileges:true

    # Flaresolverr: DDoS-Guard and Cloudflare captcha solver.
    flaresolverr:
        image: ghcr.io/flaresolverr/flaresolverr:v3.4.1
        container_name: flaresolverr
        network_mode: service:gluetun # Route all traffic through Gluetun.
        restart: unless-stopped
        user: ${PUID}:${PGID}
        environment:
            TZ: "${TZ}" # Configures the timezone to use.
        cap_drop:
            - ALL
        depends_on:
            gluetun:
                condition: service_healthy
                restart: true
        healthcheck:
            test: "curl -f http://127.0.0.1:8191/health || exit 1"
        security_opt:
            - no-new-privileges:true

    # Unpackerr: Automatic extraction of downloaded files.
    unpackerr:
        image: ghcr.io/unpackerr/unpackerr:0.14.5
        container_name: unpackerr
        hostname: unpackerr
        restart: unless-stopped
        user: ${PUID}:${PGID}
        environment:
            TZ: "${TZ}" # Configures the timezone to use.
            UN_LOG_FILE: "/downloads/unpackerr.log" # Log file location.
            UN_RADARR_0_API_KEY: "${RADARR_API_KEY}" # Radarr API key.
            UN_RADARR_0_URL: "http://radarr:7878" # Primary Radarr URL.
            UN_SONARR_0_API_KEY: "${SONARR_API_KEY}" # Sonarr API key.
            UN_SONARR_0_URL: "http://sonarr:8989" # Primary Sonarr URL.
        networks:
            - gluetun
        volumes:
            - downloads:/downloads
        cap_drop:
            - ALL
        security_opt:
            - no-new-privileges:true

    # slskd: Soulseek client.
    slskd:
        image: ghcr.io/slskd/slskd:0.23.2
        container_name: slskd
        network_mode: service:gluetun # Route all traffic thru Gluetun.
        restart: unless-stopped
        user: ${PUID}:${PGID}
        environment:
            SLSKD_DOWNLOADS_DIR: "/downloads" # mkdir -p ${DOWNLOADS_PATH}/soulseek
            SLSKD_INCOMPLETE_DIR: "/downloads/.incomplete" # mkdir -p ${DOWNLOADS_PATH}/soulseek/.incomplete
            SLSKD_REMOTE_CONFIGURATION: "true" # Allows configuring settings through the web interface.
            SLSKD_SLSK_LISTEN_PORT: "${SOULSEEK_PORT:-50300}"
            SLSKD_SLSK_PASSWORD: "${SOULSEEK_PASSWORD}" # Soulseek password to use.
            SLSKD_SLSK_USERNAME: "${SOULSEEK_USERNAME}" # Soulseek username to use.
            SLSKD_UMASK: "${UMASK}" # Configures the umask to set on newly created files.
            TZ: "${TZ}" # Configures the timezone to use.
        volumes:
            - slskd:/app
            - soulseek-downloads:/downloads
        cap_drop:
            - ALL
        healthcheck:
            test: "wget --spider http://127.0.0.1:5030/health || exit 1"
        depends_on:
            gluetun:
                condition: service_healthy
                restart: true
        security_opt:
            - no-new-privileges:true

    # Soularr: Soulseek integration for Lidarr.
    soularr:
        image: ghcr.io/mrusse/soularr:main
        container_name: soularr
        network_mode: service:gluetun
        restart: unless-stopped
        user: ${PUID}:${PGID}
        environment:
            TZ: "${TZ}" # Configures the timezone to use.
        volumes:
            - soularr-config:/data
            - soulseek-downloads:/downloads
        cap_drop:
            - ALL
        depends_on:
            gluetun:
                condition: service_healthy
                restart: true
            lidarr:
                condition: service_healthy
                restart: true
            slskd:
                condition: service_healthy
                restart: true
        healthcheck:
            test: "curl -f http://127.0.0.1:5030/health || exit 1"
        security_opt:
            - no-new-privileges:true

    # mam-ip-helper: Update MyAnonaMouse seedbox session to match Gluetun's IP.
    mam-ip-helper:
        image: tyzen9/myanonamouse-ip-helper:1.0.0
        container_name: mam-ip-helper
        network_mode: service:gluetun # Route all traffic through Gluetun.
        read_only: true
        restart: unless-stopped
        user: ${PUID}:${PGID}
        environment:
            TZ: "${TZ}" # Configures the timezone to use.
            MAM_ID: "${MAM_ID}" # MyAnonaMouse session ID.
        cap_drop:
            - ALL
        depends_on:
            gluetun:
                condition: service_healthy
                restart: true
        security_opt:
            - no-new-privileges:true

networks:
    caddy:
        external: true
        name: caddy-network # $ docker network create caddy-network
    gluetun:
        external: true
        name: gluetun-network # $ docker network create gluetun-network

volumes:
    qbittorrent-config:
        external: true
        name: qbittorrent-config-volume # $ docker volume create qbittorrent-config-volume
    qbittorrent-data:
        external: true
        name: qbittorrent-data-volume # $ docker volume create qbittorrent-volume
    gluetun:
        external: true
        name: gluetun-volume # $ docker volume create gluetun-volume
    prowlarr:
        external: true
        name: prowlarr-volume # $ docker volume create prowlarr-volume
    slskd:
        external: true
        name: slskd-volume # $ docker volume create slskd-volume
    soularr:
        external: true
        name: soularr-volume
    soularr-config:
        name: soularr-config-bind
        driver_opts:
            device: "${APPDATA_PATH}/soularr" # Root path to store Soularr data.
            o: bind
            type: none
    soulseek-downloads:
        name: soulseek-downloads-bind
        driver_opts:
            device: "${DOWNLOADS_PATH}/soulseek" # Root path to store downloaded soulseek files into.
            o: bind
            type: none
    downloads:
        name: downloads-bind
        driver_opts:
            device: "${DOWNLOADS_PATH}" # Root path to store downloaded files into.
            o: bind
            type: none
