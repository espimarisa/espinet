{
	acme_ca https://acme.zerossl.com/v2/DV90 # Use ZeroSSL for certificates.
	acme_dns cloudflare {$CLOUDFLARE_API_TOKEN} # Use Cloudflare for DNS challenges.
	email {$ACME_EMAIL}

	dynamic_dns {
		provider cloudflare {$CLOUDFLARE_API_TOKEN}
		check_interval 1h
		versions ipv4
		domains {
			{$DDNS_DOMAINS}
		}
	}

	servers {
		trusted_proxies static private_ranges 100.64.0.0/10 # Trust static ranges and Tailscale ranges.
	}
}

# Snippet for common security headers.
(security_headers) {
	header {
		-Server # Remove the Server header.
		Referrer-Policy "strict-origin-when-cross-origin" # Control referrer information.
		Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" # Enable HSTS.
		X-Content-Type-Options "nosniff" # Prevent browser from MIME-type sniffing.
		X-Frame-Options "SAMEORIGIN" # Prevent clickjacking attacks.
	}
}

# Snippet for Cloudflare-protected services.
(cloudflare_proxy) {
	import security_headers

	# Match requests from Cloudflare's IPs
	@cloudflare {
		remote_ip 173.245.48.0/20 103.21.244.0/22 103.22.200.0/22 103.31.4.0/22 141.101.64.0/18 108.162.192.0/18 190.93.240.0/20 188.114.96.0/20 197.234.240.0/22 198.41.128.0/17 162.158.0.0/15 104.16.0.0/13 104.24.0.0/14 172.64.0.0/13 131.0.72.0/22 2400:cb00::/32 2606:4700::/32 2803:f800::/32 2405:b500::/32 2405:8100::/32 2a06:98c0::/29 2c0f:f248::/32
	}

	# Match requests from local/private network ranges.
	@local {
		remote_ip private_ranges 100.64.0.0/10
	}

	# Handle requests from Cloudflare, setting the real IP header
	handle @cloudflare {
		reverse_proxy {args[0]} {
			header_up X-Forwarded-For {http.request.header.CF-Connecting-IP}
		}
	}

	# Handle requests from local networks (without the Cloudflare header)
	handle @local {
		reverse_proxy {args[0]}
	}

	# Block all other requests
	handle {
		respond "Access Denied" 403
	}

	encode zstd gzip
	log {
		format json
		output stdout
	}
}

# Snippet for general external services.
(external_proxy) {
	import security_headers
	reverse_proxy {args[0]}
	encode zstd gzip
	log {
		format json
		output stdout
	}
}

# Snippet for internal-only services.
(internal_proxy) {
	@not_internal not remote_ip private_ranges 100.64.0.0/10
	abort @not_internal
	reverse_proxy {args[0]}
	encode zstd gzip
}

# Cloudflare-protected services; proxied.
{$CHHOTO_URL} {
	import cloudflare_proxy chhoto:4567
}

{$VAULTWARDEN_URL} {
	import cloudflare_proxy vaultwarden:80

	header {
		X-XSS-Protection 0 # Vaultwarden wants X-XSS-Protection to be disabled.
		-X-Frame-Options # X-Frame-Options breaks some 2FA connectors.
	}
}

{$THELOUNGE_URL} {
	import cloudflare_proxy thelounge:9000
}

# Other external services.
{$JELLYFIN_URL} {
	import external_proxy jellyfin:8096
}

{$OPENCLOUD_URL} {
	import external_proxy opencloud:9200
}

# Internal services.
cleanuparr.{$INTERNAL_DOMAIN} {
	import internal_proxy cleanuparr:11011
}

lidarr.{$INTERNAL_DOMAIN} {
	import internal_proxy lidarr:8686
}

profilarr.{$INTERNAL_DOMAIN} {
	import internal_proxy profilarr:6868
}

prowlarr.{$INTERNAL_DOMAIN} {
	import internal_proxy gluetun:9696
}

qbittrent.{$INTERNAL_DOMAIN} {
	import internal_proxy gluetun:8080
}

radarr.{$INTERNAL_DOMAIN} {
	import internal_proxy radarr:7878
}

readarr.{$INTERNAL_DOMAIN} {
	import internal_proxy readarr:8787
}

slskd.{$INTERNAL_DOMAIN} {
	import internal_proxy gluetun:5030
}

sonarr.{$INTERNAL_DOMAIN} {
	import internal_proxy sonarr:8989
}
