---
name: apps

# Default Caddy options.
x-defaults-caddy: &defaults-caddy
    caddy.tls.ca: "https://acme.zerossl.com/v2/DV90" # Use ZeroSSL for certificates.
    caddy.tls.dns: "cloudflare $CLOUDFLARE_API_TOKEN" # Use Cloudflare for DNS challenges.
    caddy.tls.protocols: "tls1.3" # Require TLS 1.3.

# Default environment variables.
x-defaults-env: &defaults-env
    PGID: "${PGID}" # Local group to run as.
    PUID: "${PUID}" # Local user to run as.
    TZ: "${TZ}" # Configures the timezone to use.
    UMASK: "${UMASK}" # Default umask to apply to newly created files.

# Default healthcheck options.
x-defaults-healthcheck: &defaults-healthcheck
    interval: 1m
    retries: 3
    timeout: 3s

# Default options.
x-defaults: &defaults
    restart: unless-stopped
    environment: *defaults-env
    networks:
        - caddy
    security_opt:
        - no-new-privileges:true

services:
    ###############################################################################
    # OpenCloud: Self-hosted cloud storage.                                       #
    ###############################################################################

    opencloud:
        <<: *defaults
        image: opencloudeu/opencloud-rolling:3
        container_name: opencloud
        entrypoint: /bin/sh
        hostname: opencloud
        command:
            ["-c", "opencloud init --insecure true || true; opencloud server"]
        environment:
            <<: *defaults-env
            FRONTEND_ARCHIVER_MAX_SIZE: "10000000000" # Max size of 10GB for web archives.
            IDM_ADMIN_PASSWORD: "${OPENCLOUD_ADMIN_PASSWORD}" # Configures the initial admin password.
            IDM_CREATE_DEMO_USERS: "false" # Do not create demo users.
            NOTIFICATIONS_SMTP_ENCRYPTION: "${SMTP_TRANSPORT_ENCRYPTION}" # Type of encryption to use or something idk.
            NOTIFICATIONS_SMTP_HOST: "${SMTP_HOST}" # External SMTP host URL to connect to.
            NOTIFICATIONS_SMTP_INSECURE: "${SMTP_INSECURE}" # If enabled, allows insecure connections to the external SMTP server.
            NOTIFICATIONS_SMTP_PASSWORD: "${SMTP_PASSWORD}" # External SMTP email account password to login with.
            NOTIFICATIONS_SMTP_PORT: "${SMTP_PORT}" # External SMTP port to connect to.
            NOTIFICATIONS_SMTP_SENDER: "OpenCloud <${SMTP_SENDER}>" # External SMTP address used for sending email notifications.
            NOTIFICATIONS_SMTP_USERNAME: "${SMTP_USERNAME}" # External SMTP email account username to login with.
            OC_ADD_RUN_SERVICES: "notifications" # Additional services to start.
            OC_INSECURE: "false" # Do not run in insecure mode.
            OC_LOG_COLOR: "true" # Log in color.
            OC_LOG_LEVEL: "warn" # Log at the warn level.
            OC_LOG_PRETTY: "true" # Use pretty logs.
            OC_SHARING_PUBLIC_SHARE_MUST_HAVE_PASSWORD: "false" # Allow public shares without passwords.
            OC_SHARING_PUBLIC_WRITEABLE_SHARE_MUST_HAVE_PASSWORD: "true" # Writable public shares must have passwords.
            OC_URL: "https://${OPENCLOUD_URL}" # Configures the OpenCloud URL.
            PROXY_TLS: "false" # Do not use SSL between the reverse proxy and OpenCloud.
        healthcheck:
            <<: *defaults-healthcheck
            test: "wget --spider https://${OPENCLOUD_URL} || exit 1"
        labels:
            <<: *defaults-caddy
            caddy: "${OPENCLOUD_URL}" # Reverse proxy traffic to the published URL.
            caddy.import: "external opencloud:9200" # Reverse proxy internal traffic.
        ports:
            - ${OPENCLOUD_PORT:-9200}:9200/tcp # Web interface.
        volumes:
            - opencloud-data:/var/lib/opencloud
            - opencloud-config:/etc/opencloud

    ###############################################################################
    # Snapp: Self-hosted URL shortener.                                           #
    ###############################################################################

    snapp:
        <<: *defaults
        image: uraniadev/snapp:0.9-rc-029
        container_name: snapp
        hostname: snapp
        environment:
            <<: *defaults-env
            ADMIN_PASSWORD: "${SNAPP_PASSWORD:-password}" # Configures the default admin password.
            ADMIN_USERNAME: "${SNAPP_USERNAME:-admin}" # Configures the default admin username.
            ALLOW_UNSECURE_HTTP: "false" # Disallow shortening http-only links.
            DATABASE_PROVIDER: "sqlite" # Use SQLite as the database provider.
            DATABASE_URL: "file:./db.sqlite" # Use the local SQLite database.
            DISABLE_HOME: "true" # Disables the default landing page.
            ENABLE_SIGNUP: "false" # Do not allow public signups.
            ENABLED_MFA: "true" # Require MFA for all users.
            ORIGIN: "https://${SNAPP_URL}" # Configure the origin URL to be the published external URL.
            PUBLIC_URL: "https://${SNAPP_URL}" # Configures the public URL to be the published external URL.
            SMTP_FROM: "${SMTP_SENDER}" # External email server sender.
            SMTP_HOST: "${SMTP_HOST}" # External email server host.
            SMTP_PASS: "${SMTP_PASSWORD}" # External email server password.
            SMTP_PORT: "${SMTP_PORT}" # External email server port.
            PORT: "${SNAPP_PORT:-3005}" # Configures the port to use.
            SMTP_USER: "${SMTP_USERNAME}" # External email server username.
            TOKEN_SECRET: "${SNAPP_SECRET}" # Configures the secret to use.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:${SNAPP_PORT:-3005}/health || exit 1"
        labels:
            <<: *defaults-caddy
            caddy: "${SNAPP_URL}" # Reverse proxy traffic to the published URL.
            caddy.import: "external snapp:${SNAPP_PORT:-3005}" # Reverse proxy internal traffic.
        ports:
            - ${SNAPP_PORT:-3005}:${SNAPP_PORT:-3005}/tcp # Web interface.
        volumes:
            - "${SNAPP_DATA_PATH}/db.sqlite:/app/dbschema/sqlite/prisma/db.sqlite" # Configuration and data file.

    ###############################################################################
    # The Lounge: Web based IRC client.                                           #
    ###############################################################################

    thelounge:
        <<: *defaults
        image: lscr.io/linuxserver/thelounge:latest
        container_name: thelounge
        hostname: thelounge
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:9000 || exit 1"
        labels:
            <<: *defaults-caddy
            caddy: "${THELOUNGE_URL}" # Reverse proxy traffic to the published URL.
            caddy.import: "external thelounge:9000" # Reverse proxy internal traffic.
        ports:
            - ${THELOUNGE_PORT:-9000}:9000/tcp # Web interface.
        volumes:
            - thelounge:/config # The Lounge configuration and database volume.

    ###############################################################################
    # Vaultwarden: Self-hosted Bitwarden-compatible server.                       #
    ###############################################################################

    vaultwarden:
        <<: *defaults
        image: ghcr.io/dani-garcia/vaultwarden:1.34.2
        container_name: vaultwarden
        hostname: vaultwarden
        environment:
            <<: *defaults-env
            ADMIN_RATELIMIT_MAX_BURST: "3" # Configures admin ratelimit.
            ADMIN_RATELIMIT_SECONDS: "300" # Configures admin ratelimit cooldown.
            ADMIN_TOKEN: "${VAULTWARDEN_ADMIN_TOKEN}" # Admin encryption token.
            DOMAIN: "https://${VAULTWARDEN_URL}" # Configures the domain to use.
            EMAIL_CHANGE_ALLOWED: "true" # Enables email changing.
            EMERGENCY_ACCESS_ALLOWED: "true" # Enables emergency access.
            LOGIN_RATELIMIT_MAX_BURST: "10" # Configures ratelimits.
            LOGIN_RATELIMIT_SECONDS: "60" # Configures ratelimit cooldown.
            PUSH_ENABLED: "${VAULTWARDEN_PUSH_ENABLED}" # Configures notification support. Requires PUSH_INSTALLATION_ID and PUSH_INSTALLATION_KEY.
            PUSH_INSTALLATION_ID: "${VAULTWARDEN_PUSH_INSTALLATION_ID}" # https://bitwarden.com/host/
            PUSH_INSTALLATION_KEY: "${VAULTWARDEN_PUSH_INSTALLATION_KEY}" # https://bitwarden.com/host/
            SENDS_ALLOWED: "true" # Enables Bitwarden sends.
            SIGNUPS_ALLOWED: "${VAULTWARDEN_SIGNUPS}" # Configures if signups should be enabled.
            SMTP_FROM: "${SMTP_SENDER}" # External email server sender.
            SMTP_HOST: "${SMTP_HOST}" # External email server host.
            SMTP_PASSWORD: "${SMTP_PASSWORD}" # External email server password.
            SMTP_PORT: "${SMTP_PORT}" # External email server port.
            SMTP_SECURITY: "force_tls" # External email server encryption method.
            SMTP_TIMEOUT: "${SMTP_TIMEOUT}" # 15s timeout.
            SMTP_USERNAME: "${SMTP_USERNAME}" # External email server username.
            WEB_VAULT_ENABLED: "true" # Enables the web vault.
            WEBSOCKET_ENABLED: "true" # Enable WS support.
        healthcheck:
            <<: *defaults-healthcheck
            test: "curl -f http://127.0.0.1:80/alive || exit 1"
        labels:
            <<: *defaults-caddy
            caddy: "${VAULTWARDEN_URL}" # Reverse proxy traffic to the published URL.
            caddy.import: "external vaultwarden:80" # Reverse proxy internal traffic.
        ports:
            - ${VAULTWARDEN_PORT:-11001}:80/tcp # Web interface.
        volumes:
            - vaultwarden:/data

networks:
    caddy:
        external: true
        name: caddy-network # $ docker network create caddy-network

volumes:
    opencloud-config:
        driver_opts:
            device: "${OPENCLOUD_DATA_PATH}/config" # Root path to store OpenCloud configuration data.
            o: bind
            type: none
        name: opencloud-config-volume
    opencloud-data:
        driver_opts:
            device: "${OPENCLOUD_DATA_PATH}/data" # Root path to store OpenCloud user data.
            o: bind
            type: none
        name: opencloud-data-volume
    thelounge:
        driver_opts:
            device: "${THELOUNGE_DATA_PATH}" # Root path to store The Lounge data.
            o: bind
            type: none
    vaultwarden:
        driver_opts:
            device: "${VAULTWARDEN_DATA_PATH}" # Root path to store Vaultwarden data.
            o: bind
            type: none
