---
services:
    ###############################################################################################
    # Gluetun: VPN client.                                                                        #
    ###############################################################################################

    gluetun:
        container_name: gluetun
        image: ghcr.io/qdm12/gluetun:v3.39.1 # Held back due to weird TLS issues?
        env_file: ./.env
        hostname: gluetun
        restart: unless-stopped
        cap_add:
            - NET_ADMIN # Required for configuring Wireguard.
        devices:
            - /dev/net/tun:/dev/net/tun # Wireguard support.
        environment:
            BLOCK_ADS: "off" # https://github.com/qdm12/gluetun/issues/765
            BLOCK_MALICIOUS: "off" # https://github.com/qdm12/gluetun/issues/765
            BLOCK_SURVEILLANCE: "off" # https://github.com/qdm12/gluetun/issues/765
            DOT_PROVIDERS: "quad9" # Use Quad9 for DOT; Cloudflare introduces weird issues.
            FIREWALL_OUTBOUND_SUBNETS: "${FIREWALL_OUTBOUND_SUBNETS}" # List of local subnets allowed to access the gluetun network.
            FIREWALL_VPN_INPUT_PORTS: "${FIREWALL_VPN_INPUT_PORTS}" # Ports to use for server-side VPN forwarding; provided by VPN service provider.
            HEALTH_TARGET_ADDRESS: "quad9.net:443" # Ping Quad9 for healthchecks, Cloudflare is iffy.
            HEALTH_VPN_DURATION_INITIAL: "60s" # https://github.com/qdm12/gluetun-wiki/blob/main/setup/options/healthcheck.md
            HTTPPROXY: "off" # Disable the built-in HTTP proxy.
            PGID: "${PGID}" # Local group to run as.
            PORT_FORWARD_ONLY: "${PORT_FORWARD_ONLY}" # If on, only connect to P2P servers.
            PUID: "${PUID}" # Local user to run as.
            SERVER_CITIES: "${SERVER_CITIES}" # VPN server cities to connect to.
            SERVER_COUNTRIES: "${SERVER_COUNTRIES}" # VPN server countries to connect to.
            SERVER_REGIONS: "${SERVER_REGIONS}" # VPN server regions to connect to.
            SHADOWSOCKS: "off" # Disable the built-in Shadowsocks server.
            TZ: "${TZ}" # Local timezone to use.
            UPDATER_PERIOD: "24h" # Update server data every 24 hours.
            VPN_PORT_FORWARDING_UP_COMMAND: /bin/sh -c 'wget -O- --retry-connrefused --post-data "json={\"listen_port\":{{PORTS}}}" http://127.0.0.1:8080/api/v2/app/setPreferences 2>&1' # Attempt to update qBittorrent port; local auth bypass needs to be on. Edit port above if need be.
            VPN_PORT_FORWARDING: "${VPN_PORT_FORWARDING}" # If on, enables P2P port forwarding.
            VPN_SERVICE_PROVIDER: "${VPN_SERVICE_PROVIDER}" # https://github.com/qdm12/gluetun-wiki/tree/main/setup/providers
            VPN_TYPE: "wireguard" # Use Wireguard for VPN connections.
            WIREGUARD_ADDRESSES: "${WIREGUARD_ADDRESSES}" # Address(es) from the VPN provider's configuration file.
            WIREGUARD_MTU: "1200" # Use a lower MTU for stability/performance.
            WIREGUARD_PERSISTENT_KEEPALIVE: "25s" # Keep Wireguard alive a little longer.
            WIREGUARD_PRESHARED_KEY: "${WIREGUARD_PRESHARED_KEY}" # Preshared key from the VPN provider's configuration file.
            WIREGUARD_PRIVATE_KEY: "${WIREGUARD_PRIVATE_KEY}" # PrivateKey from the VPN provider's configuration file.
            WIREGUARD_PUBLIC_KEY: "${WIREGUARD_PUBLIC_KEY}" # PublicKey from the VPN provider's configuration file.
        networks:
            - gluetun # Internal Gluetun network.
        ports:
            - ${BYPARR_PORT:-8191}:8191/tcp # Byparr web server.
            - ${CLEANUPARR_PORT:-11011}:11011/tcp # Cleanuparr web interface.
            - ${DEEMIX_PORT:-6595}:6595/tcp # Deemix web interface.
            - ${LIDARR_PORT:-8686}:8686/tcp # Lidarr web interface.
            - ${PROFILARR_PORT:-6868}:6868/tcp # Profilarr web interface.
            - ${PROWLARR_PORT:-9696}:9696/tcp # Prowlarr web interface.
            - ${QBITTORRENT_PORT:-8080}:${QBITTORRENT_PORT:-8080}/tcp # qBittorrent web interface.
            - ${RADARR_PORT:-7878}:7878/tcp # Radarr web interface.
            - ${READARR_PORT:-8787}:8787/tcp # Readarr web interface.
            - ${SONARR_PORT:-8989}:8989/tcp # Sonarr web interface.
        security_opt:
            - no-new-privileges:true
        volumes:
            - gluetun:/gluetun # Temporary Gluetun log and output directory.

    ###############################################################################################
    # qBittorrent: BitTorrent client.                                                             #
    ###############################################################################################

    qbittorrent:
        container_name: qbittorrent
        image: lscr.io/linuxserver/qbittorrent:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all traffic through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            DOCKER_MODS: "ghcr.io/gabe565/linuxserver-mod-vuetorrent" # Auto-install Vuetorrent to /vuetorrent.
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
            WEBUI_PORT: "${QBITTORRENT_PORT:-8080}" # Sets the web interface port.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 30s
            test: "curl -f http://127.0.0.1:${QBITTORRENT_PORT:-8080} || exit 1"
            timeout: 3s
        security_opt:
            - no-new-privileges:true # Prevents privilege escalation.
        volumes:
            - downloads:/downloads # Root path to store downloaded files into.
            - qbittorrent:/config # qBittorrent configuration and database.

    ###############################################################################################
    # Deemix: Deezer music download client.                                                       #
    ###############################################################################################

    deemix:
        container_name: deemix
        image: ghcr.io/bambanah/deemix:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            DEEMIX_SINGLE_USER: "true" # Use one global user.
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK_SET: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 30s
            test: "curl -f http://127.0.0.1:6595 || exit 1"
            timeout: 3s
        security_opt:
            - no-new-privileges:true
        volumes:
            - deemix:/config # Deemix configuration volume.
            - downloads:/downloads # Root path to store downloaded files into.

    ###############################################################################################
    # Lidarr: Music manager, organizer, and PVR.                                                  #
    ###############################################################################################

    lidarr:
        container_name: lidarr
        image: ghcr.io/hotio/lidarr:pr-plugins
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 30s
            test: "curl -f http://127.0.0.1:8686/ping || exit 1"
            timeout: 3s
        security_opt:
            - no-new-privileges:true
        volumes:
            - downloads:/downloads # Root path to store downloaded files into.
            - lidarr:/config # Lidarr configuration volume.
            - media-library:/library # Root path to the media library.

    ###############################################################################################
    # Radarr: Movie manager, organizer, and PVR.                                                  #
    ###############################################################################################

    radarr:
        container_name: radarr
        image: lscr.io/linuxserver/radarr:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 30s
            test: "curl -f http://127.0.0.1:7878/ping || exit 1"
            timeout: 3s
        security_opt:
            - no-new-privileges:true
        volumes:
            - downloads:/downloads # Root path to store downloaded files into.
            - media-library:/library # Root path to the media library.
            - radarr:/config # Radarr configuration volume.

    ###############################################################################################
    # Readarr: Book manager, organizer, and PVR (fork with continued development).                #
    ###############################################################################################

    readarr:
        container_name: readarr
        image: ghcr.io/pennydreadful/bookshelf:hardcover
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 30s
            test: "curl -f http://127.0.0.1:8787/ping || exit 1"
            timeout: 3s
        security_opt:
            - no-new-privileges:true
        volumes:
            - downloads:/downloads # Root path to store downloaded files into.
            - media-library:/library # Root path to the media library.
            - readarr:/config # Readarr configuration volume.

    ###############################################################################################
    # Sonarr: Anime/TV manager, organizer, and PVR.                                               #
    ###############################################################################################

    sonarr:
        container_name: sonarr
        image: lscr.io/linuxserver/sonarr:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 30s
            test: "curl -f http://127.0.0.1:8989/ping || exit 1"
            timeout: 3s
        security_opt:
            - no-new-privileges:true
        volumes:
            - downloads:/downloads # Root path to store downloaded files into.
            - media-library:/library # Root path to the media library.
            - sonarr:/config # Sonarr configuration volume.

    ###############################################################################################
    # Prowlarr: Indexer and proxy manager for PVRs.                                               #
    ###############################################################################################

    prowlarr:
        container_name: prowlarr
        image: lscr.io/linuxserver/prowlarr:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        healthcheck:
            interval: 1m
            retries: 3
            start_period: 30s
            test: "curl -f http://127.0.0.1:9696/ping || exit 1"
            timeout: 3s
        security_opt:
            - no-new-privileges:true
        volumes:
            - downloads:/downloads # Root path to store downloaded files into.
            - prowlarr:/config # Prowlarr configuration volume.

    ###############################################################################################
    # Profilarr: Automatic profile management for 'ARR apps.                                      #
    ###############################################################################################

    profilarr:
        container_name: profilarr
        image: santiagosayshey/profilarr:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            TZ: "${TZ}" # Local timezone to use.
        security_opt:
            - no-new-privileges:true
        volumes:
            - profilarr:/config # Profilarr configuration volume.

    ###############################################################################################
    # Cleanuparr: Automatic cleanups for 'ARR apps.                                               #
    ###############################################################################################

    cleanuparr:
        container_name: cleanuparr
        image: ghcr.io/cleanuparr/cleanuparr:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
        security_opt:
            - no-new-privileges:true
        volumes:
            - cleanuparr:/config # Cleanuparr configuration volume.

    ###############################################################################################
    # Unpackerr: Automatic download extraction.                                                   #
    ###############################################################################################

    unpackerr:
        container_name: unpackerr
        image: ghcr.io/unpackerr/unpackerr:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UN_LOG_FILE: "/downloads/unpackerr.log" # Log file location.
            UN_RADARR_0_API_KEY: "${RADARR_API_KEY}" # Radarr API key.
            UN_RADARR_0_URL: "http://localhost:7878" # Primary Radarr URL.
            UN_SONARR_0_API_KEY: "${SONARR_API_KEY}" # Sonarr API key.
            UN_SONARR_0_URL: "http://localhost:8989" # Primary Sonarr URL.
        security_opt:
            - no-new-privileges:true
        volumes:
            - "downloads:/downloads" # Root downloads directory volume.

    ###############################################################################################
    # Byparr: Bypass Cloudflare and anti-bot prompts. Used for Prowlarr trackers.                 #
    ###############################################################################################

    byparr:
        container_name: byparr
        image: ghcr.io/thephaseless/byparr:latest
        env_file: ./.env
        network_mode: service:gluetun # Route all networking through Gluetun.
        restart: unless-stopped
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            PGID: "${PGID}" # Local group to run as.
            PUID: "${PUID}" # Local user to run as.
            TZ: "${TZ}" # Local timezone to use.
            UMASK: "${UMASK}" # Umask to apply to newly created files.
        security_opt:
            - no-new-privileges:true

    ###############################################################################################
    # mam-ip-helper: Automatically update MyAnonaMouse linked session ID.                         #
    ###############################################################################################

    mam-ip-helper:
        container_name: mam-ip-helper
        image: tyzen9/myanonamouse-ip-helper:latest
        env_file: ./.env
        network_mode: "service:gluetun" # Route all networking through Gluetun.
        read_only: true
        restart: unless-stopped
        cap_drop:
            - ALL # Remove all permissions.
        depends_on:
            gluetun:
                condition: service_healthy # Require Gluetun to be healthy before connecting.
                restart: true
        environment:
            MAM_ID: "${MAM_ID}" # MyAnonaMouse session ID.
        security_opt:
            - no-new-privileges:true
networks:
    gluetun:
        driver: bridge
        external: true # $ docker network create gluetun-network
        name: gluetun-network

volumes:
    cleanuparr:
        external: true
        name: cleanuparr-volume # $ docker volume create cleanuparr-volume
    deemix:
        external: true
        name: deemix-volume # $ docker volume create deemix-volume
    gluetun:
        external: true
        name: gluetun-volume # $ docker volume create gluetun-volume
    lidarr:
        external: true
        name: lidarr-volume # $ docker volume create lidarr-volume
    profilarr:
        external: true
        name: profilarr-volume # $ docker volume create profilarr-volume
    prowlarr:
        external: true
        name: prowlarr-volume # $ docker volume create prowlarr-volume
    qbittorrent:
        external: true
        name: qbittorrent-volume # $ docker volume create qbittorrent-volume
    radarr:
        external: true
        name: radarr-volume # $ docker volume create radarr-volume
    readarr:
        external: true
        name: readarr-volume # $ docker volume create readarr-volume
    sonarr:
        external: true
        name: sonarr-volume # $ docker volume create sonarr-volume
    downloads:
        name: downloads-volume
        driver_opts:
            device: "${DOWNLOADS_PATH}" # Root path to place downloaded files into.
            o: bind
            type: none
    media-library:
        name: media-library-volume
        driver_opts:
            device: "${MEDIA_LIBRARY_PATH}" # Root path to the media library.
            o: bind
            type: none
