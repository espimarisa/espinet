---
services:
  ###########################################################################
  # Beszel: Server monitoring hub - https://beszel.dev/                     #
  ###########################################################################

  beszel:
    image: ghcr.io/henrygd/beszel/beszel:0.12.12
    container_name: beszel
    env_file: ../../.env
    hostname: beszel
    restart: unless-stopped
    environment:
      APP_URL: "https://beszel.${INTERNAL_DOMAIN}" # Configures the app url.
    ports:
      - 127.0.0.1:8090:8090/tcp # Web interface.
    networks:
      - caddy
    volumes:
      - /etc/localtime:/etc/localtime:ro # Local timezone mount.
      - beszel-socket:/beszel_socket # Beszel agent socket.
      - beszel:/beszel_data # Beszel data.
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "/beszel", "health", "--url", "http://localhost:8090"]
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - "/tmp" # Required for read-only image.

  beszel-agent:
    image: ghcr.io/henrygd/beszel/beszel-agent-intel:0.12.12 # use -intel for Arc GPU support.
    container_name: beszel-agent
    env_file: ../../.env
    hostname: beszel-agent
    network_mode: host
    read_only: true
    restart: unless-stopped
    devices:
      - /dev/dri/card0:/dev/dri/card0 # GPU monitoring...?
    environment:
      HUB_URL: "http://127.0.0.1:8090" # Hub URL to connect to.
      KEY: "${BESZEL_KEY}" # SSH key to connect to the Beszel hub with; generated in the WebUI post-install.
      LISTEN: "0.0.0.0:45876" # Host port to listen on; defaults to 45876.
      TOKEN: "${BESZEL_TOKEN}" # Token to connect to the Beszel hub with; generated in the WebUI post-install.
    volumes:
      - /etc/localtime:/etc/localtime:ro # Local timezone mount.
      - ${STORAGE_PATH}:/extra-filesystems/storage:ro # Storage directory for FS monitoring.
      - beszel-agent:/var/lib/beszel-agent # Beszel agent data.
      - beszel-socket:/beszel_socket # Beszel agent socket.
      - socket-proxy:/var/run/docker.sock:ro # Socket proxy Docker socket mount.
    depends_on:
      beszel:
        condition: service_healthy
        restart: true
      socket-proxy:
        condition: service_healthy
        restart: true
    cap_add:
      - CAP_PERFMON # Required for Intel GPU monitoring apparently?
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "/agent", "health"]
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - "/tmp" # Required for read-only image.

  ###########################################################################
  # Dozzle: Docker log viewer - https://dozzle.dev/                         #
  ###########################################################################

  dozzle:
    image: ghcr.io/amir20/dozzle:v8.14.3
    container_name: dozzle
    env_file: ../../.env
    hostname: dozzle
    read_only: true
    restart: unless-stopped
    user: "${PUID}:${PGID}"
    environment:
      DOCKER_HOST: "tcp://socket-proxy:2375" # Connect to the socket proxy.
      DOZZLE_ENABLE_ACTIONS: "true" # Enables container actions.
      DOZZLE_ENABLE_SHELL: "true" # Allows access to container shells.
    expose:
      - 8080/tcp # Web interface.
    networks:
      - caddy
      - socket-proxy
    volumes:
      - dozzle:/data
    cap_drop:
      - ALL
    depends_on:
      socket-proxy:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "/dozzle", "healthcheck"]
    security_opt:
      - no-new-privileges:true

  ###########################################################################
  # Gatus: Status and uptime monitoring - https://gatus.io                  #
  ###########################################################################

  gatus:
    image: ghcr.io/twin/gatus:v5.25.2
    container_name: gatus
    env_file: ../../.env
    hostname: gatus
    read_only: true
    restart: unless-stopped
    user: "${PUID}:${PGID}"
    environment:
      SOCKET_PROXY_URL: "http://socket-proxy:2375/v1.45" # Docker Socket Proxy baseurl.
      TZ: "${TZ}" # Configures the timezone to use.
    expose:
      - 8080/tcp # Web interface.
    networks:
      - caddy
      - socket-proxy
    volumes:
      - ./gatus:/config
    cap_drop:
      - ALL
    depends_on:
      gatus-db:
        condition: service_healthy
        restart: true
      socket-proxy:
        condition: service_healthy
        restart: true
    security_opt:
      - no-new-privileges:true

  gatus-db:
    image: ghcr.io/11notes/postgres:17
    container_name: gatus-db
    env_file: ../../.env
    hostname: gatus-db
    read_only: true
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: "postgres" # Postgres password to use.
      TZ: "${TZ}" # Configures the timezone to use.
    networks:
      - socket-proxy
    volumes:
      - gatus-db:/postgres
    tmpfs:
      - "/postgres/log:uid=${PUID},gid=${PGID}" # Required for read-only image.
      - "/postgres/run:uid=${PUID},gid=${PGID}" # Required for read-only image.
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

networks:
  caddy:
    external: true
    name: caddy-network # $ docker network create caddy-network
  socket-proxy:
    external: true # $ docker network create --internal=true socket-proxy-network
    internal: true # Isolates the network from the outside.
    name: socket-proxy-network # Internal-only network used only for Socket Proxy traffic.

volumes:
  beszel:
    name: beszel-volume
    external: true
  beszel-agent:
    name: beszel-agent-volume
    external: true
  beszel-socket:
    name: beszel-socket-volume
    external: true
  dozzle:
    name: dozzle-volume
    external: true
  socket-proxy:
    name: socket-proxy-volume
    external: true
  gatus-db:
    name: gatus-db-volume
    external: true
